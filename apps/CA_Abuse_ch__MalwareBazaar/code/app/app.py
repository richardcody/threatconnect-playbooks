# -*- coding: utf-8 -*-
"""ThreatConnect Job App"""
import json
import requests
from requests.exceptions import ConnectionError, HTTPError, Timeout, RequestException
import time

# Import default Job Class (Required)
from job_app import JobApp


class App(JobApp):
    """Job App"""

    def __init__(self, _tcex):
        """Initialize class properties."""
        super().__init__(_tcex)
        self.batch = None
        self.url = 'https://mb-api.abuse.ch/api/v1/'


    def run(self):
        api_key = None
        owner = self.args.tc_owner
        self.batch = self.tcex.batch(owner=owner, action='Create', attribute_write_type='Replace', halt_on_error=False)
        rating = int(self.args.rating)
        confidence = int(self.args.rating)
        download_samples = self.args.download_malware_samples
        api_key = self.args.api_key
        selector_options = self.args.selector_options
        # the two valid options for selector_options:
        # ---- 'time' (malware added within the last 60 minutes)
        # ---- '100' (100 most recent)
        # https://bazaar.abuse.ch/api/#latest_additions
        # selector_options = self.args.selector_option
        demo_mode = self.args.demo_mode
        additional_tags = str(self.args.additional_tags).split('|')
        self.batch = self.tcex.batch(owner=owner, action='Create', attribute_write_type='Replace', halt_on_error=False)

        if download_samples:
            self.tcex.log.info('Download samples is True')
            if api_key is None:
                err_msg = 'Download option selected but an API Key has not been entered. Enter a api key or uncheck download malware option'
                self.tcex.exit(1, err_msg)
            elif len(api_key) < 1:
                err_msg = 'Download option selected but an API Key has not been entered. Enter a api key or uncheck download malware option'
                self.tcex.exit(1, err_msg)

        def get_bazarr_response(url, selector):
            self.tcex.log.info('Getting Abuse.ch Bazarr API response')
            self.tcex.log.debug(f'URL is: {url}')
            if demo_mode:
                self.tcex.log.info(f'Demo mode enabled, will truncate JSON')
                self.tcex.log.debug(f'To ensure we have data for the demo mode, selector is forced to 100')
                selector = 100
            data = {'query': 'get_recent', 'selector': selector}
            response = requests.post(url, data=data)
            if response.status_code != 200:
                err_msg = f'Error connecting to: {url}\rStatus Code: {response.status_code}\r'
                self.tcex.log.info(f'Error connecting: {err_msg}')
                self.tcex.exit(1, f'Error connecting. {err_msg}, raw response: {response.raw}')
            json_response = json.loads(response.content)
            self.tcex.log.debug(f'Response was: {json_response}')
            query_status = json_response['query_status']
            if query_status == 'no_results':
                self.tcex.exit(0, f'No results to process that match the selector: {selector}')
            if query_status == 'unknown_selector':
                self.tcex.exit(1, f'Unknown selector: {selector} https://bazaar.abuse.ch/api/#latest_additions')
            return json_response

        def download_sample(url, api_key, sha256_hash, ):
            temp_path = self.tcex.default_args.tc_temp_path
            self.tcex.log.info('Getting Abuse.ch Malware Bazaar Malware sample')
            self.tcex.log.debug(f'API URL is: {url}{sha256_hash}')
            headers = {'API-KEY': api_key}
            data = {'query': 'get_file', 'sha256_hash': sha256_hash}
            self.tcex.log.debug(f'Header data: {json.dumps(data)}')
            retry = 0
            self.tcex.log.debug(f'Retry value: {retry}')
            max_retries = 3
            self.tcex.log.debug(f'Max retries: {max_retries}')
            is_done = False
            while retry < max_retries and not is_done:
                try:
                    self.tcex.log.debug(f'Attempting try: {retry} at getting malware data')
                    response = requests.post(url, data=data, headers=headers, timeout=10, allow_redirects=True)
                    response.raise_for_status()
                    is_done = True
                except HTTPError as http_err:
                    self.tcex.log.info('HTTP error occurred: {}'.format(http_err))
                    response = 'HTTP error occurred: {}'.format(http_err)
                    self.tcex.exit(1, response)
                except Timeout as te:
                    self.tcex.log.debug(f'Error Connecting, retrying connection, full text: {te}')
                    self.tcex.log.debug('Incrementing re-try counter')
                    retry += 1
                    time.sleep(1)
                except Exception as err:
                    self.tcex.log.info('Other error occurred: {}'.format(err))
                    response = 'Other error occurred: {}'.format(err)
                    self.tcex.exit(1, response)
            malware_location = f'{temp_path}/{sha256_hash}.zip'
            with open(f'{malware_location}', 'wb') as downloaded_sample:
                downloaded_sample.write(response.content)
                self.tcex.log.debug(f'Sample has been downloaded to: {malware_location}')
                return response.content

        def format_as_batch(url, website_response, api_key, additional_user_tags, rating, confidence):
            self.tcex.log.info('Iterating over MalwareBazaar Response')
            self.tcex.log.debug(f'URL input: {url}')
            self.tcex.log.debug(f'Website Response input: {json.dumps(website_response)}')
            base_url = 'https://bazaar.abuse.ch/sample'
            self.tcex.log.debug(f'Using base URL: {base_url}')
            if demo_mode:
                self.tcex.log.info('Using Demo mode, truncating JSON')
                indicators = website_response.get('data')[0:2]
                self.tcex.log.debug(f'Truncated response: {json.dumps(indicators)}')
            else:
                indicators = website_response.get('data')
            for indicator in indicators:
                self.tcex.log.debug(f'Iterating over response input: {indicator}')
                sha256_value = indicator.get('sha256_hash', None)
                if not sha256_value:
                    self.tcex.exit(msg='SHA256 value is None')
                full_url = f'{base_url}/{sha256_value}'
                self.tcex.log.debug(f'Using Full URL of: {full_url}')
                sha1_value = indicator.get('sha1_hash', None)
                md5_value = indicator.get('md5_hash')
                first_seen = indicator.get('first_seen', None)
                file_name = indicator.get('file_name', sha256_value)
                file_size = indicator.get('file_size', None)
                file_mime = indicator.get('file_type_mime', None)
                file_type = indicator.get('file_type', None)
                reporter_value = indicator.get('reporter', None)
                tlsh_value = indicator.get('tlsh', None)
                ssdeep_value = indicator.get('ssdeep', None)
                imph_value = indicator.get('imphash', None)
                file_tags = indicator.get('tags', None)
                self.tcex.log.debug(f'Tag\'s Extracted: {file_tags}')
                clamav_data = indicator['intelligence'].get('clamav')
                intel_downloads = indicator['intelligence'].get('downloads', 0)
                intel_uploads = indicator['intelligence'].get('uploads', 1)
                spamtrap_check = indicator['intelligence'].get('mail', None)
                if spamtrap_check:
                    spamtrap_rating = indicator['intelligence']['mail'].get('Generic')
                    spamtrap_IT_rating = indicator['intelligence']['mail'].get('IT')
                    spamtrap_CH_rating = indicator['intelligence']['mail'].get('CH')
                else:
                    spamtrap_rating = 'Unknown'
                    spamtrap_IT_rating = 'Unknown'
                    spamtrap_CH_rating = 'Unknown'
                self.tcex.log.debug('Submitting indicator data to batch')
                FH = self.batch.file(md5=md5_value, sha1=sha1_value, sha256=sha256_value,
                                     rating=rating, confidence=confidence, size=file_size)
                if file_tags:
                    for tag in file_tags:
                        self.tcex.log.debug(f'Applying tag: {tag} to indicator')
                        FH.tag(tag)
                if additional_user_tags:
                    for tag in additional_user_tags:
                        self.tcex.log.debug(f'Applying user tag: {tag} to indicator')
                        FH.tag(tag)
                description = f'Downloads: {intel_downloads}\r' \
                              f'Uploads: {intel_uploads}\r' \
                              f'TLSH Hash (Trend Micro Locality Sensitive Hash): {tlsh_value}\r' \
                              f'Reporter: {reporter_value}\r ClamAV: {clamav_data}\r' \
                              f'SpamTrap Data\r\tRating: {spamtrap_rating}\r' \
                              f'IT Rating: {spamtrap_IT_rating}\r' \
                              f'CH Rating: {spamtrap_CH_rating}'
                source = FH.attribute(attr_type='Source', attr_value=f'{full_url}', displayed=True)
                description_attr = FH.attribute(attr_type='Description', attr_value=description, displayed=True)
                ssdeep = FH.attribute(attr_type='ssdeep Hash', attr_value=ssdeep_value, unique=True)
                file_type_attr = FH.attribute(attr_type='File Type', attr_value=f'{file_mime} {file_type}', unique=True)
                import_hash_attr = FH.attribute(attr_type='Import Hash', attr_value=imph_value, unique=True)
                occurrence = FH.occurrence()
                occurrence.date = first_seen
                occurrence.file_name = f'{file_name}'
                if download_samples:
                    self.tcex.log.info('Downloading malware sample')
                    zip_pass = 'infected'
                    doc_xid = self.batch.generate_xid(sha256_value + owner)
                    self.tcex.log.debug(f'Generated XID: {doc_xid}')
                    self.tcex.log.debug(f'Sample SHA256: {sha256_value}')
                    malware_sample_binary = download_sample(url, api_key, sha256_value)
                    if malware_sample_binary == None:
                        self.tcex.log.debug(f'Error getting document contents, skipping')
                        pass
                    self.tcex.log.info('Sample downloaded, creating batch group request')
                    self.tcex.log.debug(f'Sample File name: {file_name}')
                    group_name = file_name
                    malware = self.batch.document(name=group_name,
                                                  file_name=f'{file_name}.zip',
                                                  file_content=malware_sample_binary,
                                                  malware=True,
                                                  password=zip_pass,
                                                  xid=doc_xid)
                    self.tcex.log.debug(f'Adding malware document description')
                    malware.malware = True
                    malware_desc = malware.attribute('Description', f'{description}', displayed=True, unique=True)
                    malware_pass = malware.attribute('Password', f'{zip_pass}', unique=True)
                    self.tcex.log.debug(f'Adding source url: {full_url}')
                    malware_source = malware.attribute('Source', f'{full_url}', displayed=True, unique=True)
                    if file_tags:
                        for tag in file_tags:
                            self.tcex.log.debug(f'Applying tag: {tag} to document')
                            malware.tag(tag)
                    if additional_user_tags:
                        for tag in additional_user_tags:
                            self.tcex.log.debug(f'Applying user tag: {tag} to document')
                            malware.tag(tag)
                    self.tcex.log.debug('Saving document group to batch')
                    self.batch.save(malware)
                    self.tcex.log.debug('Adding document to indicator association')
                    FH.association(doc_xid)
                self.tcex.log.debug('Saving batch request for indicator')
                self.batch.save(FH)
            self.tcex.log.debug('Checking batch status')
            batch_status = self.batch.submit_all()
            self.tcex.log.debug(batch_status)

        bazarr_json_resp = get_bazarr_response(self.url, selector_options)
        self.tcex.log.info('JSON retrieved, submitting indicators to batch')
        submit_batch = format_as_batch(self.url, bazarr_json_resp, api_key, additional_tags, rating, confidence)
